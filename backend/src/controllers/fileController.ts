import type { Request, Response } from "express"
import mongoose from "mongoose"
import { supabase } from "../config/supabase"
import File, { type IFile } from "../models/file"
import Project from "../models/project"
import User from "../models/user"
import { v4 as uuidv4 } from "uuid"

// ‚úÖ FONCTION POUR V√âRIFIER/CR√âER LE BUCKET
const ensureBucketExists = async (): Promise<boolean> => {
  try {
    const { data: buckets, error: listError } = await supabase.storage.listBuckets()

    if (listError) {
      console.error("‚ùå Erreur v√©rification buckets:", listError.message)
      return false
    }

    const ifcBucket = buckets?.find((b) => b.name === "ifc-files")

    if (!ifcBucket) {
      console.log("üîÑ Cr√©ation bucket ifc-files en cours...")

      const { error: createError } = await supabase.storage.createBucket("ifc-files", {
        public: false,
        allowedMimeTypes: ["application/octet-stream"],
        fileSizeLimit: 50 * 1024 * 1024, // 50MB
      })

      if (createError) {
        console.error("‚ùå Impossible de cr√©er le bucket:", createError.message)
        return false
      }

      console.log("‚úÖ Bucket ifc-files cr√©√© !")
    }

    return true
  } catch (error: any) {
    console.error("‚ùå Erreur v√©rification bucket:", error.message)
    return false
  }
}

export const uploadFiles = async (req: Request, res: Response): Promise<void> => {
  const uploadId = uuidv4().substring(0, 8)
  console.log(`[${uploadId}] üöÄ D√©marrage upload SUPABASE`)

  try {
    // ‚úÖ V√âRIFIER QUE LE BUCKET EXISTE AVANT L'UPLOAD
    const bucketExists = await ensureBucketExists()
    if (!bucketExists) {
      console.error(`[${uploadId}] ‚ùå Bucket ifc-files non disponible`)
      res.status(500).json({
        error: "Bucket Supabase non disponible",
        solution: "Cr√©ez manuellement le bucket 'ifc-files' dans Supabase Console",
      })
      return
    }

    // V√©rification authentification
    if (!req.user) {
      console.error(`[${uploadId}] ‚ùå Authentification √©chou√©e`)
      res.status(401).json({ error: "Non autoris√©" })
      return
    }

    const user = req.user as { email?: string }
    if (!user.email) {
      console.error(`[${uploadId}] ‚ùå Email utilisateur non trouv√©`)
      res.status(401).json({ error: "Email utilisateur non trouv√©" })
      return
    }

    // Extraction des donn√©es
    const projectId: string = req.body.projectId
    const userEmail: string = user.email
    const files = req.files as Express.Multer.File[]

    console.log(
      `[${uploadId}] üì¶ Donn√©es re√ßues: projectId=${projectId}, fichiers=${files?.length}, email=${userEmail}`,
    )

    // Validation
    if (!files || files.length === 0) {
      console.error(`[${uploadId}] ‚ùå Aucun fichier fourni`)
      res.status(400).json({ error: "Aucun fichier fourni" })
      return
    }

    if (!projectId) {
      console.error(`[${uploadId}] ‚ùå ProjectId manquant`)
      res.status(400).json({ error: "ProjectId requis" })
      return
    }

    // V√©rification projet
    const project = await Project.findById(projectId)
    if (!project) {
      console.error(`[${uploadId}] ‚ùå Projet non trouv√©: ${projectId}`)
      res.status(404).json({ error: `Projet avec ID ${projectId} non trouv√©` })
      return
    }
    console.log(`[${uploadId}] ‚úÖ Projet trouv√©: ${project.name || projectId}`)

    // Recherche utilisateur
    let userId: mongoose.Types.ObjectId | null = null
    if (userEmail) {
      const userDoc = await User.findOne({ email: userEmail })
      if (userDoc) {
        userId = userDoc._id
        console.log(`[${uploadId}] ‚úÖ Utilisateur trouv√©: ${userId}`)
      }
    }

    const downloadURLs: string[] = []
    const fileMetadata: any[] = []
    const newFileIds: mongoose.Types.ObjectId[] = []
    const errors: string[] = []

    // Traitement de chaque fichier
    for (let i = 0; i < files.length; i++) {
      const file = files[i]
      const fileId: string = `${uploadId}-file-${i}`

      console.log(`[${fileId}] üìÑ Traitement fichier: ${file.originalname} (${file.size} octets)`)

      // Validation format IFC
      if (!file.originalname.toLowerCase().endsWith(".ifc")) {
        const error: string = `Le fichier ${file.originalname} n'est pas au format IFC`
        console.error(`[${fileId}] ‚ùå ${error}`)
        errors.push(error)
        continue
      }

      // Validation taille fichier (50MB max)
      const maxFileSize: number = 50 * 1024 * 1024 // 50MB
      if (file.size > maxFileSize) {
        const error: string = `Le fichier ${file.originalname} est trop volumineux (${Math.round(file.size / 1024 / 1024)}MB). Taille maximum: 50MB.`
        console.error(`[${fileId}] ‚ùå ${error}`)
        errors.push(error)
        continue
      }

      try {
        // G√©n√©ration du chemin Supabase
        const timestamp: number = Date.now()
        const sanitizedName: string = file.originalname
          .replace(/[^a-zA-Z0-9.-]/g, "_")
          .replace(/_{2,}/g, "_")
          .toLowerCase()

        const fileName: string = `${timestamp}_${sanitizedName}`
        const supabasePath: string = `projects/${projectId}/${fileName}`

        console.log(`[${fileId}] üìÇ Chemin Supabase g√©n√©r√©: ${supabasePath}`)

        // ‚úÖ UPLOAD VERS SUPABASE STORAGE AVEC GESTION D'ERREUR AM√âLIOR√âE
        console.log(`[${fileId}] üîÑ D√©marrage upload Supabase...`)
        const uploadStartTime: number = Date.now()

        const { data: uploadData, error: uploadError } = await supabase.storage
          .from("ifc-files")
          .upload(supabasePath, file.buffer, {
            contentType: "application/octet-stream",
            metadata: {
              originalName: file.originalname,
              uploadId: uploadId,
              projectId: projectId,
              userEmail: userEmail,
              uploadTimestamp: new Date().toISOString(),
            },
            upsert: false,
          })

        if (uploadError) {
          console.error(`[${fileId}] ‚ùå √âchec upload Supabase:`, uploadError.message)

          let userFriendlyError = `Erreur upload ${file.originalname}: `

          if (uploadError.message.includes("Bucket not found")) {
            userFriendlyError += "Bucket Supabase non trouv√©. V√©rifiez la configuration."
            console.error(`[${fileId}] üîß SOLUTION: Cr√©ez le bucket 'ifc-files' dans Supabase Console`)
          } else if (uploadError.message.includes("Duplicate")) {
            userFriendlyError += "Fichier d√©j√† existant."
          } else if (uploadError.message.includes("size")) {
            userFriendlyError += "Fichier trop volumineux."
          } else {
            userFriendlyError += uploadError.message
          }

          errors.push(userFriendlyError)
          continue
        }

        const uploadDuration: number = Date.now() - uploadStartTime
        console.log(`[${fileId}] ‚úÖ Upload Supabase r√©ussi en ${uploadDuration}ms`)

        // R√©cup√©ration URL publique
        const { data: urlData } = supabase.storage.from("ifc-files").getPublicUrl(supabasePath)

        if (!urlData?.publicUrl) {
          console.error(`[${fileId}] ‚ùå √âchec r√©cup√©ration URL publique`)
          errors.push(`√âchec r√©cup√©ration URL pour ${file.originalname}`)
          continue
        }

        console.log(`[${fileId}] ‚úÖ URL publique Supabase obtenue`)
        downloadURLs.push(urlData.publicUrl)

        // Sauvegarde dans MongoDB
        const newFile = new File({
          name: file.originalname,
          file_url: urlData.publicUrl,
          file_size: file.size,
          fileType: "IFC",
          project: new mongoose.Types.ObjectId(projectId),
          supabasePath: supabasePath,
          uploadedBy: userId || userEmail,
          ifcMetadata: {
            schema: "IFC2x3",
            application: "Supabase Upload",
            creator: userEmail,
            timestamp: new Date(),
            coordinates: { x: 0, y: 0, z: 0 },
          },
          uploadedAt: new Date(),
        } as IFile)

        await newFile.save()
        console.log(`[${fileId}] ‚úÖ Sauvegarde MongoDB r√©ussie: ${newFile._id}`)

        fileMetadata.push({
          id: (newFile._id as mongoose.Types.ObjectId).toString(),
          name: file.originalname,
          url: urlData.publicUrl,
          size: file.size,
          fileType: "IFC",
        })

        newFileIds.push(newFile._id as mongoose.Types.ObjectId)
      } catch (fileError: any) {
        console.error(`[${fileId}] ‚ùå √âchec traitement fichier:`, fileError.message)
        errors.push(`Erreur traitement ${file.originalname}: ${fileError.message}`)
      }
    }

    // Mise √† jour du projet
    if (newFileIds.length > 0) {
      try {
        await Project.findByIdAndUpdate(projectId, { $push: { files: { $each: newFileIds } } }, { new: true })
        console.log(`[${uploadId}] ‚úÖ Projet mis √† jour avec ${newFileIds.length} nouveaux fichiers`)
      } catch (updateError: any) {
        console.error(`[${uploadId}] ‚ùå √âchec mise √† jour projet:`, updateError.message)
        errors.push("√âchec mise √† jour projet avec nouveaux fichiers")
      }
    }

    // R√©ponse
    const successCount: number = downloadURLs.length
    const totalCount: number = files.length

    const responseData = {
      downloadURLs,
      files: fileMetadata,
      success: successCount > 0,
      message: `${successCount}/${totalCount} fichier(s) upload√©(s) avec succ√®s vers Supabase Storage`,
      errors: errors.length > 0 ? errors : undefined,
    }

    if (successCount === 0) {
      console.error(`[${uploadId}] ‚ùå Aucun fichier upload√© avec succ√®s`, { errors })
      res.status(400).json({
        error: "Aucun fichier n'a √©t√© upload√© avec succ√®s",
        ...responseData,
      })
      return
    }

    console.log(`[${uploadId}] ‚úÖ Processus d'upload termin√© avec succ√®s vers SUPABASE`)
    res.status(200).json(responseData)
  } catch (error: any) {
    console.error(`[${uploadId}] ‚ùå √âchec processus d'upload:`, error.message)
    res.status(500).json({
      error: "√âchec upload",
      details: error.message || String(error),
      uploadId,
      storageProvider: "Supabase",
    })
  }
}

// Garder les autres fonctions...
export const getProjectFiles = async (req: Request, res: Response): Promise<void> => {
  // M√™me code qu'avant
}

export const deleteFile = async (req: Request, res: Response): Promise<void> => {
  // M√™me code qu'avant
}

export const getFileById = async (req: Request, res: Response): Promise<void> => {
  // M√™me code qu'avant
}
