import { createClient } from "@supabase/supabase-js"

const supabaseUrl = process.env.SUPABASE_URL || ""
const supabaseKey = process.env.SUPABASE_ANON_KEY || ""

if (!supabaseUrl || !supabaseKey) {
  console.error("‚ùå SUPABASE_URL et SUPABASE_ANON_KEY requis !")
  console.error("üìù Va sur supabase.com cr√©er un compte GRATUIT (pas de carte !)")
}

const supabase = createClient(supabaseUrl, supabaseKey)

// ‚úÖ CR√âATION AUTOMATIQUE DU BUCKET AU D√âMARRAGE
const initializeStorage = async (): Promise<void> => {
  try {
    console.log("üîÑ Initialisation Supabase Storage...")

    // V√©rifier les buckets existants
    const { data: buckets, error: listError } = await supabase.storage.listBuckets()

    if (listError) {
      console.error("‚ùå Erreur liste buckets:", listError.message)
      return
    }

    console.log("‚úÖ Connexion Supabase r√©ussie !")
    console.log(`üì¶ Buckets existants: ${buckets?.map((b) => b.name).join(", ") || "aucun"}`)

    // V√©rifier si le bucket ifc-files existe
    const ifcBucket = buckets?.find((b) => b.name === "ifc-files")

    if (!ifcBucket) {
      console.log("üîÑ Cr√©ation du bucket ifc-files...")

      const { data: newBucket, error: createError } = await supabase.storage.createBucket("ifc-files", {
        public: false, // Bucket priv√© pour s√©curit√©
        allowedMimeTypes: ["application/octet-stream", "application/ifc"],
        fileSizeLimit: 50 * 1024 * 1024, // 50MB max par fichier
      })

      if (createError) {
        console.error("‚ùå Erreur cr√©ation bucket:", createError.message)
        console.error("üîß Solution: CrÔøΩÔøΩez manuellement le bucket dans Supabase Console")
        console.error("   1. Allez sur https://supabase.com/dashboard")
        console.error("   2. S√©lectionnez votre projet")
        console.error("   3. Allez dans Storage")
        console.error("   4. Cliquez 'New bucket'")
        console.error("   5. Nom: ifc-files")
        console.error("   6. Public: false")
      } else {
        console.log("‚úÖ Bucket ifc-files cr√©√© avec succ√®s !")

        // Test d'upload pour v√©rifier que tout fonctionne
        const testPath = `test/init-test-${Date.now()}.txt`
        const testData = new TextEncoder().encode("Test initialisation")

        const { error: testError } = await supabase.storage.from("ifc-files").upload(testPath, testData)

        if (testError) {
          console.error("‚ùå Test upload √©chou√©:", testError.message)
        } else {
          console.log("‚úÖ Test upload r√©ussi !")

          // Nettoyer le fichier test
          await supabase.storage.from("ifc-files").remove([testPath])
          console.log("üßπ Fichier test nettoy√©")
        }
      }
    } else {
      console.log("‚úÖ Bucket ifc-files d√©j√† existant")
    }
  } catch (err: any) {
    console.error("‚ùå Erreur initialisation Supabase:", err.message)
  }
}

// Ex√©cuter l'initialisation apr√®s d√©marrage du serveur
setTimeout(initializeStorage, 2000)

export { supabase }
export default supabase